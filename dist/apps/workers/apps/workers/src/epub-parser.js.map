{
  "version": 3,
  "sources": ["../../../../../../apps/workers/src/epub-parser.ts"],
  "sourcesContent": ["import { parse as parseHtml } from 'node-html-parser';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { promisify } from 'util';\nimport * as yauzl from 'yauzl';\nimport { Logger } from '@nestjs/common';\n\nconst logger = new Logger('EpubParser');\n\nexport async function parseEpub(epubPath: string): Promise<Array<{\n  chapterNumber: number;\n  orderIndex: number;\n  content: string;\n}>> {\n  const paragraphs: Array<{\n    chapterNumber: number;\n    orderIndex: number;\n    content: string;\n  }> = [];\n\n  try {\n    // For now, let's create a simple mock parser\n    // In production, you'd use proper EPUB parsing\n    logger.log(`Parsing EPUB file: ${epubPath}`);\n    \n    // Mock data for testing\n    const mockChapters = [\n      'Chapter 1 content with multiple paragraphs. This is paragraph 1.',\n      'This is paragraph 2 of chapter 1.',\n      'Chapter 2 starts here. This is the first paragraph.',\n      'And this is the second paragraph of chapter 2.',\n    ];\n\n    let orderIndex = 0;\n    mockChapters.forEach((content, index) => {\n      const chapterNumber = Math.floor(index / 2) + 1;\n      paragraphs.push({\n        chapterNumber,\n        orderIndex: orderIndex++,\n        content: content.trim(),\n      });\n    });\n\n    logger.log(`Extracted ${paragraphs.length} paragraphs`);\n    return paragraphs;\n  } catch (error) {\n    logger.error('Error parsing EPUB:', error);\n    throw error;\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,oBAAuB;AAEvB,MAAM,SAAS,IAAI,qBAAO,YAAY;AAEtC,eAAsB,UAAU,UAI5B;AACF,QAAM,aAID,CAAC;AAEN,MAAI;AAGF,WAAO,IAAI,sBAAsB,QAAQ,EAAE;AAG3C,UAAM,eAAe;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,QAAI,aAAa;AACjB,iBAAa,QAAQ,CAAC,SAAS,UAAU;AACvC,YAAM,gBAAgB,KAAK,MAAM,QAAQ,CAAC,IAAI;AAC9C,iBAAW,KAAK;AAAA,QACd;AAAA,QACA,YAAY;AAAA,QACZ,SAAS,QAAQ,KAAK;AAAA,MACxB,CAAC;AAAA,IACH,CAAC;AAED,WAAO,IAAI,aAAa,WAAW,MAAM,aAAa;AACtD,WAAO;AAAA,EACT,SAAS,OAAO;AACd,WAAO,MAAM,uBAAuB,KAAK;AACzC,UAAM;AAAA,EACR;AACF;",
  "names": []
}
