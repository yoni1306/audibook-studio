{
  "version": 3,
  "sources": ["../../../../../../apps/workers/src/epub-parser.ts"],
  "sourcesContent": ["import { Logger } from '@nestjs/common';\nimport { JSDOM } from 'jsdom';\nimport { promisify } from 'util';\n\nconst logger = new Logger('EpubParser');\n\n// Use require for epub since it doesn't have proper ES module support\nconst EPub = require('epub');\n\nexport async function parseEpub(epubPath: string): Promise<\n  Array<{\n    chapterNumber: number;\n    orderIndex: number;\n    content: string;\n  }>\n> {\n  const paragraphs: Array<{\n    chapterNumber: number;\n    orderIndex: number;\n    content: string;\n  }> = [];\n\n  try {\n    logger.log(`Parsing EPUB file: ${epubPath}`);\n\n    // Create epub instance\n    const epub = new EPub(epubPath);\n\n    // Parse the EPUB\n    await new Promise<void>((resolve, reject) => {\n      epub.parse();\n      epub.on('end', () => resolve());\n      epub.on('error', reject);\n    });\n\n    logger.log(`Book loaded: ${epub.metadata.title}`);\n\n    let orderIndex = 0;\n\n    // Process each chapter\n    for (let i = 0; i < epub.flow.length; i++) {\n      const chapter = epub.flow[i];\n\n      try {\n        // Get chapter content\n        const chapterHtml = await promisify(epub.getChapter.bind(epub))(\n          chapter.id\n        );\n\n        // Parse HTML content\n        const dom = new JSDOM(chapterHtml);\n        const document = dom.window.document;\n\n        // Find all paragraphs\n        const paragraphElements = document.querySelectorAll('p');\n\n        paragraphElements.forEach((p) => {\n          const text = p.textContent?.trim();\n          if (text && text.length > 0) {\n            paragraphs.push({\n              chapterNumber: i + 1,\n              orderIndex: orderIndex++,\n              content: text,\n            });\n          }\n        });\n\n        // Also check for divs that might contain text\n        const divElements = document.querySelectorAll('div');\n        divElements.forEach((div) => {\n          // Check if div has meaningful text content\n          const hasOnlyTextNodes = Array.from(div.childNodes).every(\n            (node) => node.nodeType === 3 || node.nodeName === 'BR'\n          );\n\n          if (hasOnlyTextNodes) {\n            const text = div.textContent?.trim();\n            if (text && text.length > 50) {\n              // Minimum length to avoid headers\n              paragraphs.push({\n                chapterNumber: i + 1,\n                orderIndex: orderIndex++,\n                content: text,\n              });\n            }\n          }\n        });\n      } catch (error) {\n        logger.error(`Error processing chapter ${i}:`, error);\n      }\n    }\n\n    logger.log(\n      `Extracted ${paragraphs.length} paragraphs from ${epub.flow.length} chapters`\n    );\n\n    return paragraphs;\n  } catch (error) {\n    logger.error('Error parsing EPUB:', error);\n    throw error;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAuB;AACvB,mBAAsB;AACtB,kBAA0B;AAE1B,MAAM,SAAS,IAAI,qBAAO,YAAY;AAGtC,MAAM,OAAO,QAAQ,MAAM;AAE3B,eAAsB,UAAU,UAM9B;AACA,QAAM,aAID,CAAC;AAEN,MAAI;AACF,WAAO,IAAI,sBAAsB,QAAQ,EAAE;AAG3C,UAAM,OAAO,IAAI,KAAK,QAAQ;AAG9B,UAAM,IAAI,QAAc,CAAC,SAAS,WAAW;AAC3C,WAAK,MAAM;AACX,WAAK,GAAG,OAAO,MAAM,QAAQ,CAAC;AAC9B,WAAK,GAAG,SAAS,MAAM;AAAA,IACzB,CAAC;AAED,WAAO,IAAI,gBAAgB,KAAK,SAAS,KAAK,EAAE;AAEhD,QAAI,aAAa;AAGjB,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK;AACzC,YAAM,UAAU,KAAK,KAAK,CAAC;AAE3B,UAAI;AAEF,cAAM,cAAc,UAAM,uBAAU,KAAK,WAAW,KAAK,IAAI,CAAC;AAAA,UAC5D,QAAQ;AAAA,QACV;AAGA,cAAM,MAAM,IAAI,mBAAM,WAAW;AACjC,cAAM,WAAW,IAAI,OAAO;AAG5B,cAAM,oBAAoB,SAAS,iBAAiB,GAAG;AAEvD,0BAAkB,QAAQ,CAAC,MAAM;AAC/B,gBAAM,OAAO,EAAE,aAAa,KAAK;AACjC,cAAI,QAAQ,KAAK,SAAS,GAAG;AAC3B,uBAAW,KAAK;AAAA,cACd,eAAe,IAAI;AAAA,cACnB,YAAY;AAAA,cACZ,SAAS;AAAA,YACX,CAAC;AAAA,UACH;AAAA,QACF,CAAC;AAGD,cAAM,cAAc,SAAS,iBAAiB,KAAK;AACnD,oBAAY,QAAQ,CAAC,QAAQ;AAE3B,gBAAM,mBAAmB,MAAM,KAAK,IAAI,UAAU,EAAE;AAAA,YAClD,CAAC,SAAS,KAAK,aAAa,KAAK,KAAK,aAAa;AAAA,UACrD;AAEA,cAAI,kBAAkB;AACpB,kBAAM,OAAO,IAAI,aAAa,KAAK;AACnC,gBAAI,QAAQ,KAAK,SAAS,IAAI;AAE5B,yBAAW,KAAK;AAAA,gBACd,eAAe,IAAI;AAAA,gBACnB,YAAY;AAAA,gBACZ,SAAS;AAAA,cACX,CAAC;AAAA,YACH;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH,SAAS,OAAO;AACd,eAAO,MAAM,4BAA4B,CAAC,KAAK,KAAK;AAAA,MACtD;AAAA,IACF;AAEA,WAAO;AAAA,MACL,aAAa,WAAW,MAAM,oBAAoB,KAAK,KAAK,MAAM;AAAA,IACpE;AAEA,WAAO;AAAA,EACT,SAAS,OAAO;AACd,WAAO,MAAM,uBAAuB,KAAK;AACzC,UAAM;AAAA,EACR;AACF;",
  "names": []
}
