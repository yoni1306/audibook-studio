{
  "version": 3,
  "sources": ["../../../../../../apps/workers/src/main.ts"],
  "sourcesContent": ["import { Logger } from '@nestjs/common';\nimport { Worker, Job } from 'bullmq';\nimport * as dotenv from 'dotenv';\n\n// Load environment variables\ndotenv.config();\n\nconst logger = new Logger('Worker');\n\n// Create worker\nconst worker = new Worker(\n  'audio-processing',\n  async (job: Job) => {\n    logger.log(`Processing job ${job.id} of type ${job.name}`);\n    logger.log(`Job data:`, job.data);\n\n    switch (job.name) {\n      case 'test-job':\n        logger.log(`Test job message: ${job.data.message}`);\n        // Simulate some work\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        return { processed: true, message: job.data.message };\n\n      case 'parse-epub':\n        logger.log(`Parsing EPUB: ${job.data.s3Key} for book ${job.data.bookId}`);\n        // TODO: Implement EPUB parsing in Day 5\n        await new Promise(resolve => setTimeout(resolve, 3000));\n        return { processed: true, bookId: job.data.bookId };\n\n      default:\n        logger.warn(`Unknown job type: ${job.name}`);\n        throw new Error(`Unknown job type: ${job.name}`);\n    }\n  },\n  {\n    connection: {\n      host: process.env.REDIS_HOST || 'localhost',\n      port: parseInt(process.env.REDIS_PORT, 10) || 6379,\n    },\n    concurrency: 1,\n  }\n);\n\n// Worker event handlers\nworker.on('completed', (job) => {\n  logger.log(`Job ${job.id} completed`);\n});\n\nworker.on('failed', (job, err) => {\n  logger.error(`Job ${job?.id} failed:`, err);\n});\n\nworker.on('active', (job) => {\n  logger.log(`Job ${job.id} started`);\n});\n\nlogger.log('\uD83D\uDE80 Worker started and listening for jobs...');\n\n// Graceful shutdown\nprocess.on('SIGTERM', async () => {\n  logger.log('SIGTERM received, closing worker...');\n  await worker.close();\n  process.exit(0);\n});"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA,oBAAuB;AACvB,oBAA4B;AAC5B,aAAwB;AAGxB,OAAO,OAAO;AAEd,MAAM,SAAS,IAAI,qBAAO,QAAQ;AAGlC,MAAM,SAAS,IAAI;AAAA,EACjB;AAAA,EACA,OAAO,QAAa;AAClB,WAAO,IAAI,kBAAkB,IAAI,EAAE,YAAY,IAAI,IAAI,EAAE;AACzD,WAAO,IAAI,aAAa,IAAI,IAAI;AAEhC,YAAQ,IAAI,MAAM;AAAA,MAChB,KAAK;AACH,eAAO,IAAI,qBAAqB,IAAI,KAAK,OAAO,EAAE;AAElD,cAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,GAAI,CAAC;AACtD,eAAO,EAAE,WAAW,MAAM,SAAS,IAAI,KAAK,QAAQ;AAAA,MAEtD,KAAK;AACH,eAAO,IAAI,iBAAiB,IAAI,KAAK,KAAK,aAAa,IAAI,KAAK,MAAM,EAAE;AAExE,cAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,GAAI,CAAC;AACtD,eAAO,EAAE,WAAW,MAAM,QAAQ,IAAI,KAAK,OAAO;AAAA,MAEpD;AACE,eAAO,KAAK,qBAAqB,IAAI,IAAI,EAAE;AAC3C,cAAM,IAAI,MAAM,qBAAqB,IAAI,IAAI,EAAE;AAAA,IACnD;AAAA,EACF;AAAA,EACA;AAAA,IACE,YAAY;AAAA,MACV,MAAM,QAAQ,IAAI,cAAc;AAAA,MAChC,MAAM,SAAS,QAAQ,IAAI,YAAY,EAAE,KAAK;AAAA,IAChD;AAAA,IACA,aAAa;AAAA,EACf;AACF;AAGA,OAAO,GAAG,aAAa,CAAC,QAAQ;AAC9B,SAAO,IAAI,OAAO,IAAI,EAAE,YAAY;AACtC,CAAC;AAED,OAAO,GAAG,UAAU,CAAC,KAAK,QAAQ;AAChC,SAAO,MAAM,OAAO,KAAK,EAAE,YAAY,GAAG;AAC5C,CAAC;AAED,OAAO,GAAG,UAAU,CAAC,QAAQ;AAC3B,SAAO,IAAI,OAAO,IAAI,EAAE,UAAU;AACpC,CAAC;AAED,OAAO,IAAI,oDAA6C;AAGxD,QAAQ,GAAG,WAAW,YAAY;AAChC,SAAO,IAAI,qCAAqC;AAChD,QAAM,OAAO,MAAM;AACnB,UAAQ,KAAK,CAAC;AAChB,CAAC;",
  "names": []
}
