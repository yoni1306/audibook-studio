{
  "version": 3,
  "sources": ["../../../../../../apps/workers/src/main.ts"],
  "sourcesContent": ["import { Logger } from '@nestjs/common';\nimport { Worker, Job } from 'bullmq';\nimport * as dotenv from 'dotenv';\nimport * as fs from 'fs/promises';\nimport { downloadFromS3 } from './s3-client';\nimport { parseEpub } from './epub-parser';\nimport { saveParagraphs, updateBookStatus } from './database.service';\nimport { BookStatus } from '@prisma/client';\n\n// Load environment variables\ndotenv.config();\n\nconst logger = new Logger('Worker');\n\n// Create worker\nconst worker = new Worker(\n  'audio-processing',\n  async (job: Job) => {\n    logger.log(`Processing job ${job.id} of type ${job.name}`);\n    logger.log(`Job data:`, job.data);\n\n    switch (job.name) {\n      case 'test-job':\n        logger.log(`Test job message: ${job.data.message}`);\n        // Simulate some work\n        await new Promise((resolve) => setTimeout(resolve, 2000));\n        return { processed: true, message: job.data.message };\n\n      case 'parse-epub':\n        logger.log(\n          `Parsing EPUB: ${job.data.s3Key} for book ${job.data.bookId}`\n        );\n\n        try {\n          // Download EPUB from S3\n          const localPath = await downloadFromS3(job.data.s3Key);\n\n          // Update status to PROCESSING\n          await updateBookStatus(job.data.bookId, BookStatus.PROCESSING);\n\n          // Parse the EPUB\n          const paragraphs = await parseEpub(localPath);\n\n          if (paragraphs.length === 0) {\n            throw new Error('No paragraphs extracted from EPUB');\n          }\n\n          // Save directly to database\n          await saveParagraphs(job.data.bookId, paragraphs);\n\n          // Update book status to READY\n          await updateBookStatus(job.data.bookId, BookStatus.READY);\n\n          // Clean up temp file\n          await fs.unlink(localPath).catch(() => {});\n\n          return {\n            processed: true,\n            bookId: job.data.bookId,\n            paragraphCount: paragraphs.length,\n          };\n        } catch (error) {\n          logger.error(`Failed to parse EPUB: ${error.message}`);\n\n          // Update book status to ERROR\n          await updateBookStatus(job.data.bookId, BookStatus.ERROR);\n\n          throw error;\n        }\n\n      case 'generate-audio':\n        logger.log(`Generating audio for paragraph ${job.data.paragraphId}`);\n        // TODO: Implement actual TTS in Day 8-9\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        logger.log(\n          `Audio generation placeholder for: \"${job.data.content.substring(\n            0,\n            50\n          )}...\"`\n        );\n        return { processed: true, paragraphId: job.data.paragraphId };\n\n      default:\n        logger.warn(`Unknown job type: ${job.name}`);\n        throw new Error(`Unknown job type: ${job.name}`);\n    }\n  },\n  {\n    connection: {\n      host: process.env.REDIS_HOST || 'localhost',\n      port: parseInt(process.env.REDIS_PORT, 10) || 6379,\n    },\n    concurrency: 1,\n  }\n);\n\n// Worker event handlers\nworker.on('completed', (job) => {\n  logger.log(`Job ${job.id} completed`);\n});\n\nworker.on('failed', (job, err) => {\n  logger.error(`Job ${job?.id} failed:`, err);\n});\n\nworker.on('active', (job) => {\n  logger.log(`Job ${job.id} started`);\n});\n\nlogger.log('\uD83D\uDE80 Worker started and listening for jobs...');\n\n// Graceful shutdown\nprocess.on('SIGTERM', async () => {\n  logger.log('SIGTERM received, closing worker...');\n  await worker.close();\n  process.exit(0);\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA,oBAAuB;AACvB,oBAA4B;AAC5B,aAAwB;AACxB,SAAoB;AACpB,uBAA+B;AAC/B,yBAA0B;AAC1B,sBAAiD;AACjD,oBAA2B;AAG3B,OAAO,OAAO;AAEd,MAAM,SAAS,IAAI,qBAAO,QAAQ;AAGlC,MAAM,SAAS,IAAI;AAAA,EACjB;AAAA,EACA,OAAO,QAAa;AAClB,WAAO,IAAI,kBAAkB,IAAI,EAAE,YAAY,IAAI,IAAI,EAAE;AACzD,WAAO,IAAI,aAAa,IAAI,IAAI;AAEhC,YAAQ,IAAI,MAAM;AAAA,MAChB,KAAK;AACH,eAAO,IAAI,qBAAqB,IAAI,KAAK,OAAO,EAAE;AAElD,cAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,GAAI,CAAC;AACxD,eAAO,EAAE,WAAW,MAAM,SAAS,IAAI,KAAK,QAAQ;AAAA,MAEtD,KAAK;AACH,eAAO;AAAA,UACL,iBAAiB,IAAI,KAAK,KAAK,aAAa,IAAI,KAAK,MAAM;AAAA,QAC7D;AAEA,YAAI;AAEF,gBAAM,YAAY,UAAM,iCAAe,IAAI,KAAK,KAAK;AAGrD,oBAAM,kCAAiB,IAAI,KAAK,QAAQ,yBAAW,UAAU;AAG7D,gBAAM,aAAa,UAAM,8BAAU,SAAS;AAE5C,cAAI,WAAW,WAAW,GAAG;AAC3B,kBAAM,IAAI,MAAM,mCAAmC;AAAA,UACrD;AAGA,oBAAM,gCAAe,IAAI,KAAK,QAAQ,UAAU;AAGhD,oBAAM,kCAAiB,IAAI,KAAK,QAAQ,yBAAW,KAAK;AAGxD,gBAAM,GAAG,OAAO,SAAS,EAAE,MAAM,MAAM;AAAA,UAAC,CAAC;AAEzC,iBAAO;AAAA,YACL,WAAW;AAAA,YACX,QAAQ,IAAI,KAAK;AAAA,YACjB,gBAAgB,WAAW;AAAA,UAC7B;AAAA,QACF,SAAS,OAAO;AACd,iBAAO,MAAM,yBAAyB,MAAM,OAAO,EAAE;AAGrD,oBAAM,kCAAiB,IAAI,KAAK,QAAQ,yBAAW,KAAK;AAExD,gBAAM;AAAA,QACR;AAAA,MAEF,KAAK;AACH,eAAO,IAAI,kCAAkC,IAAI,KAAK,WAAW,EAAE;AAEnE,cAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,GAAI,CAAC;AACxD,eAAO;AAAA,UACL,sCAAsC,IAAI,KAAK,QAAQ;AAAA,YACrD;AAAA,YACA;AAAA,UACF,CAAC;AAAA,QACH;AACA,eAAO,EAAE,WAAW,MAAM,aAAa,IAAI,KAAK,YAAY;AAAA,MAE9D;AACE,eAAO,KAAK,qBAAqB,IAAI,IAAI,EAAE;AAC3C,cAAM,IAAI,MAAM,qBAAqB,IAAI,IAAI,EAAE;AAAA,IACnD;AAAA,EACF;AAAA,EACA;AAAA,IACE,YAAY;AAAA,MACV,MAAM,QAAQ,IAAI,cAAc;AAAA,MAChC,MAAM,SAAS,QAAQ,IAAI,YAAY,EAAE,KAAK;AAAA,IAChD;AAAA,IACA,aAAa;AAAA,EACf;AACF;AAGA,OAAO,GAAG,aAAa,CAAC,QAAQ;AAC9B,SAAO,IAAI,OAAO,IAAI,EAAE,YAAY;AACtC,CAAC;AAED,OAAO,GAAG,UAAU,CAAC,KAAK,QAAQ;AAChC,SAAO,MAAM,OAAO,KAAK,EAAE,YAAY,GAAG;AAC5C,CAAC;AAED,OAAO,GAAG,UAAU,CAAC,QAAQ;AAC3B,SAAO,IAAI,OAAO,IAAI,EAAE,UAAU;AACpC,CAAC;AAED,OAAO,IAAI,oDAA6C;AAGxD,QAAQ,GAAG,WAAW,YAAY;AAChC,SAAO,IAAI,qCAAqC;AAChD,QAAM,OAAO,MAAM;AACnB,UAAQ,KAAK,CAAC;AAChB,CAAC;",
  "names": []
}
