generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id              String            @id @default(uuid())
  title           String
  author          String?
  language        String            @default("he")
  uploadedAt      DateTime          @default(now())
  s3Key           String            @unique // S3 key for the original EPUB
  status          BookStatus        @default(PROCESSING)
  pages           Page[]            // Pages detected from EPUB
  textCorrections TextCorrection[]  // All text corrections for this book
  // Metrics relations
  metricEvents    MetricEvent[]     // All metric events for this book
  bookMetrics     BookMetrics?      // Aggregated metrics for this book
  // Enhanced metadata fields
  totalPages      Int?              // Total number of pages detected
  totalParagraphs Int?              // Total number of paragraphs
  processingMetadata Json?          // Additional processing metadata
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("books")
}

model Page {
  id            String      @id @default(uuid())
  bookId        String
  book          Book        @relation(fields: [bookId], references: [id], onDelete: Cascade)
  pageNumber    Int         // Sequential page number in the book
  sourceChapter Int         // Original chapter number from EPUB (for reference)
  startPosition Int         // Start position in original chapter content
  endPosition   Int         // End position in original chapter content
  pageBreakInfo Json?       // Information about how this page was detected
  paragraphs    Paragraph[] // Paragraphs within this page
  audioS3Key    String?     // S3 key for generated audio of entire page
  audioStatus   AudioStatus @default(PENDING)
  audioDuration Float?      // Duration in seconds for the entire page
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([bookId, pageNumber])
  @@index([bookId])
  @@index([audioStatus])
  @@map("pages")
}

model Paragraph {
  id            String      @id @default(uuid())
  pageId        String
  page          Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  bookId        String      // Direct reference for easier querying
  orderIndex    Int         // Order within the page
  content       String      @db.Text
  completed     Boolean     @default(false) // Whether the paragraph is marked as completed and should not be modified
  textCorrections TextCorrection[]   // Track all text corrections for this paragraph
  // Audio metadata for this specific paragraph
  audioS3Key    String?     // S3 key for generated audio of this paragraph
  audioStatus   AudioStatus @default(PENDING)
  audioDuration Float?      // Duration in seconds for this paragraph
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([pageId, orderIndex])
  @@index([pageId])
  @@index([bookId])
  @@index([audioStatus])
  @@index([completed])
  @@map("paragraphs")
}

model TextCorrection {
  id                        String    @id @default(uuid())
  paragraphId               String
  paragraph                 Paragraph @relation(fields: [paragraphId], references: [id], onDelete: Cascade)
  bookId                    String    // Direct reference to book for easier querying
  book                      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  originalWord              String    // The original word that was corrected
  correctedWord             String    // What the word was changed to (e.g., "שָׁלוֹם")
  sentenceContext           String    @db.Text // The sentence context at time of correction
  
  // Ultra-simple aggregation field
  aggregationKey           String    // Format: "originalWord|correctedWord" for grouping
  
  fixType                   FixType   // Categorization of the text correction type
  ttsModel                  String?   // TTS model used (e.g., "openai", "elevenlabs", "azure")
  ttsVoice                  String?   // Voice used for TTS (e.g., "alloy", "echo", "fable")
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  @@index([paragraphId])
  @@index([bookId])
  @@index([originalWord])
  @@index([correctedWord])
  @@index([aggregationKey])           // Fast aggregation queries
  @@index([bookId, aggregationKey])   // Book-specific aggregation
  @@index([createdAt])                // Chronological sorting
  @@map("text_corrections")
}

enum BookStatus {
  UPLOADING
  PROCESSING
  READY
  ERROR
}

enum AudioStatus {
  PENDING
  GENERATING
  READY
  ERROR
}

// Metrics and Analytics Models
model MetricEvent {
  id          String    @id @default(uuid())
  bookId      String
  book        Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  eventType   EventType
  eventData   Json?     // Flexible event-specific data
  duration    Int?      // Processing time in milliseconds
  success     Boolean   @default(true)
  errorMessage String?  // Error details if success = false
  timestamp   DateTime  @default(now())
  
  @@index([bookId, eventType, timestamp])
  @@index([eventType, timestamp])
  @@index([timestamp])
  @@map("metric_events")
}

model BookMetrics {
  id                    String   @id @default(uuid())
  bookId                String   @unique
  book                  Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  // Core Activity Metrics
  totalTextEdits        Int      @default(0)
  totalAudioGenerated   Int      @default(0)
  totalBulkFixes        Int      @default(0)
  totalCorrections      Int      @default(0)
  
  // Performance Metrics
  avgProcessingTime     Float?   // Average processing time in milliseconds
  completionPercentage  Float    @default(0) // Percentage of paragraphs completed
  
  // Timestamps
  lastActivity          DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([lastActivity])
  @@index([completionPercentage])
  @@map("book_metrics")
}

enum EventType {
  TEXT_EDIT
  AUDIO_GENERATION
  BULK_FIX_APPLIED
  BULK_FIX_SUGGESTED
  PARAGRAPH_COMPLETED
  BOOK_UPLOADED
  EPUB_PARSED
  CORRECTION_RECORDED
}

enum FixType {
  vowelization      // Adding/removing/changing Hebrew niqqud (vowel marks)
  disambiguation    // Clarifying ambiguous Hebrew words with context
  punctuation       // Adding pauses and rhythm marks for better narration flow
  sentence_break    // Breaking long/nested sentences into clear chunks
  dialogue_marking  // Adding quotation marks and dialogue indicators
  expansion         // Expanding numbers, currency, and acronyms into readable form
  default          // Default/unclassified text correction when no specific type matches
}