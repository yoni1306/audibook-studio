generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id              String            @id @default(uuid())
  title           String
  author          String?
  language        String            @default("he")
  uploadedAt      DateTime          @default(now())
  s3Key           String            @unique // S3 key for the original EPUB
  status          BookStatus        @default(PROCESSING)
  pages           Page[]            // Pages detected from EPUB
  textCorrections TextCorrection[]  // All text corrections for this book
  // Enhanced metadata fields
  totalPages      Int?              // Total number of pages detected
  totalParagraphs Int?              // Total number of paragraphs
  processingMetadata Json?          // Additional processing metadata
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("books")
}

model Page {
  id            String      @id @default(uuid())
  bookId        String
  book          Book        @relation(fields: [bookId], references: [id], onDelete: Cascade)
  pageNumber    Int         // Sequential page number in the book
  sourceChapter Int         // Original chapter number from EPUB (for reference)
  startPosition Int         // Start position in original chapter content
  endPosition   Int         // End position in original chapter content
  pageBreakInfo Json?       // Information about how this page was detected
  paragraphs    Paragraph[] // Paragraphs within this page
  audioS3Key    String?     // S3 key for generated audio of entire page
  audioStatus   AudioStatus @default(PENDING)
  audioDuration Float?      // Duration in seconds for the entire page
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([bookId, pageNumber])
  @@index([bookId])
  @@index([audioStatus])
  @@map("pages")
}

model Paragraph {
  id            String      @id @default(uuid())
  pageId        String
  page          Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  bookId        String      // Direct reference for easier querying
  orderIndex    Int         // Order within the page
  content       String      @db.Text
  textCorrections TextCorrection[]   // Track all text corrections for this paragraph
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([pageId, orderIndex])
  @@index([pageId])
  @@index([bookId])
  @@map("paragraphs")
}

model TextCorrection {
  id              String    @id @default(uuid())
  paragraphId     String
  paragraph       Paragraph @relation(fields: [paragraphId], references: [id], onDelete: Cascade)
  bookId          String    // Direct reference to book for easier querying
  book            Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  originalWord    String    // The specific word that was changed (e.g., "שלום")
  correctedWord   String    // What the word was changed to (e.g., "שָׁלוֹם")
  sentenceContext String    @db.Text // The full sentence context for better matching
  fixType         String?   // Optional categorization like 'niqqud', 'pronunciation', etc.
  ttsModel        String?   // TTS model used (e.g., "openai", "elevenlabs", "azure")
  ttsVoice        String?   // Voice used for TTS (e.g., "alloy", "echo", "fable")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([paragraphId])
  @@index([bookId])
  @@index([originalWord])
  @@index([correctedWord])
  @@index([originalWord, correctedWord])
  @@map("text_corrections")
}

enum BookStatus {
  UPLOADING
  PROCESSING
  READY
  ERROR
}

enum AudioStatus {
  PENDING
  GENERATING
  READY
  ERROR
}