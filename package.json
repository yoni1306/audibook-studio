{
  "type": "module",
  "scripts": {
    "// Local Development": "",
    "setup:local": "./scripts/deploy/local-dev-setup.sh",
    "dev": "nx run-many --target=serve --all --parallel=3",
    "dev:full": "concurrently \"pnpm dev:api\" \"pnpm dev:web\" \"pnpm dev:workers\" \"pnpm generate:api-types:watch\"",
    "dev:api": "nx serve api",
    "dev:api:debug": "NODE_OPTIONS=\"--inspect=9231\" nx serve api",
    "dev:web": "cd apps/web && pnpm dev",
    "start:web": "cd apps/web && pnpm start",
    "preview:web": "cd apps/web && pnpm preview",
    "dev:workers": "nx serve workers",
    "dev:with-client": "concurrently \"pnpm dev:api\" \"pnpm dev:web\" \"pnpm generate:api-client:watch\"",
    "// Build": "",
    "build": "nx run-many --target=build --all",
    "build:api": "nx build api",
    "build:web": "cd apps/web && pnpm build",
    "build:workers": "nx build workers",
    "prebuild": "pnpm generate:api-client",
    "// Testing": "",
    "test": "nx run-many --target=test --all --watch=false && cd apps/web && pnpm test:run",
    "test:api": "nx test api --watch=false",
    "test:web": "cd apps/web && pnpm test:run",
    "test:workers": "nx test workers --watch=false",
    "test:watch": "nx run-many --target=test --all --watch",
    "test:affected": "nx affected:test --watch=false",
    "test:ci": "nx run-many --target=test --all --watch=false && cd apps/web && pnpm test:run",
    "// Code Quality": "",
    "lint": "nx run-many --target=lint --all",
    "lint:fix": "nx run-many --target=lint --all --fix",
    "format": "nx format:write",
    "format:check": "nx format:check",
    "// API Client Generation": "",
    "generate:api-types": "openapi-typescript ./openapi.json -o libs/api-client/src/types.ts",
    "generate:api-types:watch": "nodemon --watch ./openapi.json --exec \"pnpm generate:api-types\"",
    "generate:api-client": "pnpm generate:api-types && cd libs/api-client && pnpm build",
    "postgenerate:api-types": "prettier --write libs/api-client/src/types.ts",
    "// Database": "",
    "prisma:stdin": "cd apps/api && dotenv -e ../../.env.local -- npx prisma db execute --stdin --schema=./prisma/schema.prisma",
    "prisma:sql": "bash -c 'cd apps/api && echo \"$0\" | dotenv -e ../../.env.local -- npx prisma db execute --stdin --schema=./prisma/schema.prisma'",
    "prisma:query": "cd apps/api && dotenv -e ../../.env.local -- npx tsx src/scripts/run-sql.ts",
    "prisma:generate": "cd apps/api && dotenv -e ../../.env.local -- npx prisma generate",
    "prisma:push": "cd apps/api && dotenv -e ../../.env.local -- npx prisma db push",
    "prisma:studio": "cd apps/api && dotenv -e ../../.env.local -- npx prisma studio",
    "prisma:seed": "cd apps/api && dotenv -e ../../.env.local -- npx prisma db seed",
    "prisma:push:reset": "cd apps/api && dotenv -e ../../.env.local -- npx prisma db push --force-reset --accept-data-loss",
    "prisma:migrate:dev": "cd apps/api && dotenv -e ../../.env.local -- npx prisma migrate dev",
    "prisma:migrate:dev:name": "cd apps/api && dotenv -e ../../.env.local -- npx prisma migrate dev --name",
    "prisma:migrate:deploy": "cd apps/api && dotenv -e ../../.env.local -- npx prisma migrate deploy",
    "prisma:migrate:status": "cd apps/api && dotenv -e ../../.env.local -- npx prisma migrate status",
    "prisma:migrate:reset": "cd apps/api && dotenv -e ../../.env.local -- npx prisma migrate reset",
    "prisma:rollback": "./scripts/rollback-migration.sh",
    "prisma:rollback:list": "echo 'Available rollback scripts:' && ls -la apps/api/prisma/rollback-migrations/",
    "// Reset & Cleanup": "",
    "reset:db": "./scripts/safety-check.sh && pnpm prisma:push:reset && pnpm prisma:push",
    "reset:queue": "./scripts/safety-check.sh && docker exec audibook-studio-redis-1 redis-cli FLUSHALL",
    "reset:all": "./scripts/safety-check.sh && pnpm reset:queue && pnpm reset:db",
    "clean": "nx reset && rm -rf dist",
    "clean:web": "cd apps/web && pnpm clean",
    "// Railway Deployment": "",
    "deploy:railway": "./scripts/deploy/railway-full-deploy.sh",
    "deploy:services": "./scripts/deploy/railway-deploy-services.sh",
    "deploy:services:skip-infra": "./scripts/deploy/railway-deploy-services.sh --skip-infra",
    "deploy:secrets": "./scripts/deploy/railway-secrets-config.sh",
    "deploy:push": "./scripts/deploy/railway-push.sh",
    "deploy:push:api": "./scripts/deploy/railway-push.sh --skip-workers --skip-web",
    "deploy:push:workers": "./scripts/deploy/railway-push.sh --skip-api --skip-web",
    "deploy:push:web": "./scripts/deploy/railway-push.sh --skip-api --skip-workers",
    "// Smart Deployment (Nx Change Detection)": "",
    "deploy:smart": "./scripts/deploy/smart-deploy.sh",
    "deploy:diff": "./scripts/deploy/smart-deploy.sh --dry-run --latest-tag",
    "deploy:diff:api": "./scripts/deploy/smart-deploy.sh --service api --dry-run --latest-tag",
    "deploy:diff:web": "./scripts/deploy/smart-deploy.sh --service web --dry-run --latest-tag",
    "deploy:diff:workers": "./scripts/deploy/smart-deploy.sh --service workers --dry-run --latest-tag",
    "deploy:diff:code": "./scripts/deploy/smart-deploy.sh --dry-run --latest-tag --show-diff",
    "deploy:diff:code:api": "./scripts/deploy/smart-deploy.sh --service api --dry-run --latest-tag --show-diff",
    "deploy:diff:code:web": "./scripts/deploy/smart-deploy.sh --service web --dry-run --latest-tag --show-diff",
    "deploy:diff:code:workers": "./scripts/deploy/smart-deploy.sh --service workers --dry-run --latest-tag --show-diff",
    "deploy:smart:dry-run": "./scripts/deploy/smart-deploy.sh --dry-run",
    "deploy:smart:tag": "./scripts/deploy/smart-deploy.sh --latest-tag",
    "deploy:smart:tag:dry-run": "./scripts/deploy/smart-deploy.sh --latest-tag --dry-run",
    "deploy:smart:force": "./scripts/deploy/smart-deploy.sh --force-all",
    "deploy:smart:auto": "./scripts/deploy/smart-deploy.sh --yes",
    "deploy:smart:since": "./scripts/deploy/smart-deploy.sh --base",
    "// Docker & Monitoring": "",
    "logs:api": "docker logs -f audibook-studio-api-1",
    "logs:worker": "docker logs -f audibook-studio-worker-1",
    "logs:all": "docker-compose logs -f",
    "grafana:local": "open http://localhost:3001",
    "// Utilities": "",
    "deps:check": "nx graph",
    "affected:build": "nx affected:build"
  },
  "devDependencies": {
    "@eslint/compat": "^1.1.1",
    "@eslint/eslintrc": "^2.1.1",
    "@eslint/js": "^9.8.0",
    "@nestjs/schematics": "^11.0.0",
    "@nestjs/testing": "^11.0.0",
    "@nx/devkit": "21.2.0",
    "@nx/esbuild": "21.2.0",
    "@nx/eslint": "21.2.0",
    "@nx/eslint-plugin": "21.2.0",
    "@nx/jest": "21.2.0",
    "@nx/js": "^21.2.0",
    "@nx/nest": "^21.2.0",
    "@nx/node": "^21.2.0",
    "@nx/playwright": "21.2.0",
    "@nx/web": "21.2.0",
    "@nx/webpack": "21.2.0",
    "@openapitools/openapi-generator-cli": "^2.7.0",
    "@playwright/test": "^1.36.0",
    "@swc-node/register": "~1.9.1",
    "@swc/cli": "~0.6.0",
    "@swc/core": "~1.5.7",
    "@swc/helpers": "~0.5.11",
    "@testing-library/dom": "10.4.0",
    "@testing-library/react": "16.1.0",
    "@types/bull": "^4.10.4",
    "@types/diff": "^8.0.0",
    "@types/express": "^5.0.3",
    "@types/jest": "^29.5.12",
    "@types/jsdom": "^21.1.7",
    "@types/node": "18.16.9",
    "@types/react": "19.0.0",
    "@types/react-dom": "19.0.0",
    "@types/supertest": "^6.0.2",
    "@types/uuid": "^10.0.0",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.21",
    "babel-jest": "^29.7.0",
    "concurrently": "^8.2.2",
    "dotenv-cli": "^8.0.0",
    "esbuild": "^0.19.2",
    "eslint": "^9.8.0",
    "eslint-config-prettier": "^10.0.0",
    "eslint-plugin-import": "2.31.0",
    "eslint-plugin-jsx-a11y": "6.10.1",
    "eslint-plugin-playwright": "^1.6.2",
    "eslint-plugin-react": "7.35.0",
    "eslint-plugin-react-hooks": "5.0.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "jest-environment-node": "^29.7.0",
    "jsonc-eslint-parser": "^2.1.0",
    "nodemon": "^3.0.2",
    "nx": "^21.2.0",
    "openapi-typescript": "^7.8.0",
    "prettier": "^2.6.2",
    "prisma": "^6.9.0",
    "supertest": "^7.0.0",
    "ts-jest": "^29.1.0",
    "ts-node": "10.9.1",
    "tslib": "^2.3.0",
    "typescript": "~5.8.2",
    "typescript-eslint": "^8.29.0",
    "vite": "^5.0.8",
    "wait-on": "^7.2.0",
    "webpack-cli": "^5.1.4"
  },
  "dependencies": {
    "@aws-sdk/client-s3": "^3.844.0",
    "@aws-sdk/s3-request-presigner": "^3.844.0",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mui/icons-material": "^7.2.0",
    "@mui/material": "^7.1.2",
    "@mui/x-data-grid": "^8.5.3",
    "@nestjs/bullmq": "^11.0.2",
    "@nestjs/common": "^11.0.0",
    "@nestjs/config": "^4.0.2",
    "@nestjs/core": "^11.0.0",
    "@nestjs/platform-express": "^11.0.0",
    "@nestjs/swagger": "^11.2.0",
    "@prisma/client": "^6.9.0",
    "@types/fluent-ffmpeg": "^2.1.27",
    "@types/multer": "^1.4.13",
    "@types/yauzl": "^2.10.3",
    "axios": "^1.6.0",
    "bullmq": "^5.53.3",
    "cheerio": "^1.1.0",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.2",
    "diff": "^8.0.2",
    "dotenv": "^16.5.0",
    "epub": "^1.3.0",
    "epub-parser": "^0.2.5",
    "express": "^4.18.2",
    "fluent-ffmpeg": "^2.1.3",
    "jsdom": "^26.1.0",
    "microsoft-cognitiveservices-speech-sdk": "^1.44.1",
    "nest-winston": "^1.10.2",
    "node-html-parser": "^7.0.1",
    "openapi-fetch": "^0.14.0",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-router-dom": "^6.26.0",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^7.8.0",
    "unzipper": "^0.12.3",
    "uuid": "^11.1.0",
    "winston": "^3.17.0",
    "winston-loki": "^6.1.3",
    "xml2js": "^0.6.2",
    "yauzl": "^3.2.0"
  }
}
